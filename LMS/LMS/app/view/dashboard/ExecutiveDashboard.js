/*
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Desktop.view.dashboard.ExecutiveDashboard', {
	extend: 'Ext.panel.Panel',
	alias: 'widget.executiveDashboard',

	requires: [
		'Desktop.view.dashboard.DashboardController',
		'Ext.tab.Panel',
		'Ext.tab.Tab',
		'Ext.grid.Panel',
		'Ext.grid.column.Boolean',
		'Ext.toolbar.Toolbar',
		'Ext.form.field.Text',
		'Ext.tree.Panel',
		'Ext.tree.View',
		'Ext.grid.filters.filter.Number',
		'Ext.grid.column.Date',
		'Ext.grid.filters.filter.Date',
		'Ext.grid.filters.filter.String',
		'Ext.grid.filters.filter.Boolean',
		'Ext.selection.CheckboxModel',
		'Ext.grid.filters.Filters',
		'Ext.grid.feature.Summary',
	],

	controller: 'dashboardController',

	viewModel: {
		type: 'executiveDashboard'
	},

	id: 'executiveDashboardMain',
	layout: 'fit',
	autoShow: true,
	maximized: true,
	minimizable: true,
	header: false,
	// autoScroll: true,
	modal: true,
	items: [{
		xtype: 'tabpanel',
		layout: 'fit',
		tabPosition: 'bottom',
		listeners: {
			tabchange: 'onDashboardTabChange'
		},
		items: [{
				xtype: 'panel',
				title: 'Total Overview',
				reference: 'loanTotalOverviewPanel',
				itemId: 'loanTotalOverviewPanel',
				id: 'loanTotalOverviewPanel',
				tabConfig: {
					xtype: 'tab',
					id: 'loanTotalOverviewPanelId',
					itemId: 'loanTotalOverviewPanelId'
				},
				items: [{
					xtype: 'fieldcontainer',
					layout: 'column',
					columnWidth: 1,
					margin: '150 50 5 75',
					layout: 'column',
					height: 520,
					items: [{
							xtype: 'fieldcontainer',
							columnWidth: .5,
							style: 'background-color: #3090C7; border-radius: 16px;',
							border: true,
							margin: '75 300 0 20',
							items: [
							    {
									xtype: 'displayfield',
									itemId: 'totalRequest',
									reference: 'totalRequest',
									labelWidth: 100,
									labelAlign: 'left',
									fieldLabel: 'Total Request',
									columnWidth: 1,
									margin: '15 40 0 40',
									value: ''
								},
								{
									xtype: 'displayfield',
									itemId: 'totalPending',
									reference: 'totalPending',
									labelWidth: 100,
									labelAlign: 'left',
									fieldLabel: 'Total Pending',
									columnWidth: 1,
									margin: '0 0 0 40',
									value: ''
								},
								{
									xtype: 'displayfield',
									itemId: 'totalCompleted',
									reference: 'totalCompleted',
									labelWidth: 100,
									labelAlign: 'left',
									fieldLabel: 'Total Completed',
									columnWidth: 1,
									margin: '0 0 10 40',
									value: ''
								},
								
							]
						},
						{
							xtype: 'fieldcontainer',
							columnWidth: .5,
							items: [{
								xtype: 'polar',
								reference: 'dashboardStatusPie',
								itemId: 'dashboardStatusPie',
								width: 400,
								height: 235,
								store: 'gDashboardStatusStore',
								plugins: {
									ptype: 'chartitemevents',
									moveEvents: true
								},
								insetPadding: 15,
								innerPadding: 5,
								showInLegend: true,
								legend: {
									docked: 'right',
									style: {
										font: '9px Helvetica'
									}
								},
								interactions: ['rotate', 'itemhighlight'],
								series: [{
									type: 'pie',
									angleField: 'value',
									showMarkers: false,
									showInLegend: true,
									donut: 0,
									highlight: true,
									label: {
										field: ['name'],
										display: 'rotate',
										contrast: true,
										font: '9px Helvetica',
										calloutLine: {
											length: 10,
											width: 1
										},
										hidden: true,
										renderer: function (value, label, storeItem) {
											return '';
										}
									},
									tooltip: {
										trackMouse: true,
										renderer: function (toolTip, storeItem, item) {
											toolTip.setHtml(storeItem.get('name') + ': ' + storeItem.get('value'));
										}
									}
								}]
							}]
						}
					]
				}]
			},
			{
				xtype: 'panel',
				title: 'Loan Tracker Dept Wise',
				reference: 'loanTrackerDeptWisePanel',
				itemId: 'loanTrackerDeptWisePanel',
				id: 'loanTrackerDeptWisePanel',
				tabConfig: {
					xtype: 'tab',
					id: 'lloanTrackerDeptWisePanelId',
					itemId: 'loanTrackerDeptWisePanelId'
				},
				dockedItems: [{
					xtype: 'panel',
					dock: 'top',
					itemId: 'SearchItemProperties',
					layout: 'column',
					collapseDirection: 'top',
					collapsed: false,
					collapsible: true,
					title: 'Search',
					dockedItems: [{
						xtype: 'toolbar',
						dock: 'bottom',
						shadow: true,
						itemId: 'SearchTollbar',
						layout: {
							type: 'hbox',
							align: 'middle',
							pack: 'center'
						},
						items: [{
								xtype: 'button',
								padding: 2,
								text: 'Search',
								reference: 'SearchBtn',
								listeners: {
									click: 'onClickLoanTrackerDeptWiseSearch'
								}
							},
							{
								xtype: 'button',
								padding: 3,
								text: 'Clear',
								listeners: {
									click: 'onClickSearchClear'
								}
							},
							'-',
							'-',
							{
								iconCls: 'icon-refresh', // optional icon class
								tooltip: 'Refresh',
								align: 'right',
								margin: '0 10 0 0',
								handler: 'refreshLoanTrackerDeptWise'
							},
						]
					}],
					items: [{
							xtype: 'textfield',
							itemId: 'loanTrackingId',
							reference: 'loanTrackingId',
							fieldLabel: 'Tracking Number',
							columnWidth: .28,
							labelAlign: 'right',
							labelWidth: 100,
							margin: '5 5 5 5',
						},
						{
							xtype: 'textfield',
							itemId: 'bpNoSrc',
							reference: 'bpNoSrc',
							fieldLabel: 'BP No',
							columnWidth: .23,
							labelAlign: 'right',
							labelWidth: 60,
							margin: '5 5 5 5',
						},
						{
							xtype: 'textfield',
							itemId: 'nid4Search',
							reference: 'nid4Search',
							fieldLabel: 'NID',
							columnWidth: .23,
							labelAlign: 'right',
							labelWidth: 50,
							margin: '5 5 5 5',
						},
						{
							xtype: 'textfield',
							itemId: 'account4Search',
							reference: 'account4Search',
							fieldLabel: 'Account No',
							columnWidth: .26,
							labelAlign: 'right',
							labelWidth: 95,
							margin: '5 5 5 5',
						},
						{
							xtype: 'textfield',
							itemId: 'customerName4Search',
							reference: 'customerName4Search',
							fieldLabel: 'Customer Name',
							columnWidth: .28,
							labelAlign: 'right',
							//left: '15px',
							labelWidth: 100,
							margin: '5 5 5 5',
						},
						{
							xtype: 'datefield',
							columnWidth: 0.23,
							reference: 'fromDate',
							itemId: 'fromDate',
							fieldLabel: 'From Date',
							labelAlign: 'right',
							emptyText: 'From Date',
							labelWidth: 60,
							margin: '5 5 5 5',
							format: 'd M Y',
						},
						{
							xtype: 'datefield',
							columnWidth: 0.23,
							itemId: 'toDate',
							reference: 'toDate',
							fieldLabel: 'To Date',
							labelAlign: 'right',
							emptyText: 'To Date',
							labelWidth: 50,
							margin: '5 5 5 5',
							format: 'd M Y',
						}
					]
				}],
				items: [{
					xtype: 'gridpanel',
					reference: 'loanTrackerDepetWise',
					itemId: 'loanTrackerDepetWise',
					columnWidth: 1.5,
					margin: '0 0 5 0',
					autoScroll: true,
					width: 1150,
					height: 420,
					layout: 'fit',
					header: false,
					border: true,
					title: false,
					filterable: true,
					closable: true,
					scrollable: true,
					border: false,
					store: 'gLoanTrackerDepartmentWise',
					viewConfig: {
						stripeRows: true,
						autoHeight: true,
						enableTextSelection: true,
						columnLines: true
					},

					features: [{
						id: 'group',
						ftype: 'summary',
						groupHeaderTpl: '{name}',
						hideGroupedHeader: true,
						enableGroupingMenu: false,
						showSummaryRow: true
					}],

					listeners: {
						scope: this,
						click: {
							element: 'body',
							delegate: '.x-grid-cell',
							fn: function (e, target, view) {

								var cmp = Ext.fly(target).up('#executiveDashboardMain').component;

								if (Ext.fly(target).up('tr').is('.x-grid-row-summary')) {

									var record = e.record;
									var deptName;
									var cellClickIndecate = "selectCell";
									var summaryClickIndecate = "summary";
									var undefined = false;
									var filterdata;
									var loanTrackingId = cmp.lookupReference('loanTrackingId').value;
									var bpNoSrc = cmp.lookupReference('bpNoSrc').value;
									var nid4Search = cmp.lookupReference('nid4Search').value;
									var account4Search = cmp.lookupReference('account4Search').value;
									var customerName4Search = cmp.lookupReference('customerName4Search').value;

									deptName = cmp.lookupReference('loanTrackerDepetWise').columns[target.cellIndex].text;

									if (deptName == '#' || deptName == 'Created On') return;
									if (loanTrackingId && !bpNoSrc && !nid4Search && !account4Search && !customerName4Search) filterdata = loanTrackingId;
									if (!loanTrackingId && bpNoSrc && !nid4Search && !account4Search && !customerName4Search) filterdata = bpNoSrc;
									if (!loanTrackingId && !bpNoSrc && nid4Search && !account4Search && !customerName4Search) filterdata = nid4Search;
									if (!loanTrackingId && !bpNoSrc && !nid4Search && account4Search && !customerName4Search) filterdata = account4Search;
									if (!loanTrackingId && !bpNoSrc && !nid4Search && !account4Search && customerName4Search) filterdata = customerName4Search;


									if (typeof record !== "undefined" && record != null && record != '') {
										var dashboardDetailsWin = getDashboardDetailsWindow('DASHBOARD DETAILS');
										dashboardDetailsWin.down('#deptName').setValue(deptName);
										dashboardDetailsWin.down('#record').setValue(record);
										dashboardDetailsWin.down('#cellClickIndecate').setValue(summaryClickIndecate);
										dashboardDetailsWin.down('#filterdata').setValue(filterdata);
										dashboardDetailsWin.show();
									} else return;
								} else {
									var loanTrackingId = cmp.lookupReference('loanTrackingId').value;
									var bpNoSrc = cmp.lookupReference('bpNoSrc').value;
									var nid4Search = cmp.lookupReference('nid4Search').value;
									var account4Search = cmp.lookupReference('account4Search').value;
									var customerName4Search = cmp.lookupReference('customerName4Search').value;
									var filterdata;
									if (loanTrackingId && !bpNoSrc && !nid4Search && !account4Search && !customerName4Search) filterdata = loanTrackingId;
									if (!loanTrackingId && bpNoSrc && !nid4Search && !account4Search && !customerName4Search) filterdata = bpNoSrc;
									if (!loanTrackingId && !bpNoSrc && nid4Search && !account4Search && !customerName4Search) filterdata = nid4Search;
									if (!loanTrackingId && !bpNoSrc && !nid4Search && account4Search && !customerName4Search) filterdata = account4Search;
									if (!loanTrackingId && !bpNoSrc && !nid4Search && !account4Search && customerName4Search) filterdata = customerName4Search;

									var recordLimit = target.firstElementChild.innerText;
									deptName = cmp.lookupReference('loanTrackerDepetWise').columns[target.cellIndex].text;

									if (recordLimit == 0 || deptName == '#' || deptName == 'Created On') return;
									else {
										var record = e.record;
										var deptName;
										var cellClickIndecate = "selectCell";

										var dashboardDetailsWin = getDashboardDetailsWindow('DASHBOARD DETAILS');
										dashboardDetailsWin.down('#deptName').setValue(deptName);
										dashboardDetailsWin.down('#record').setValue(record);
										dashboardDetailsWin.down('#cellClickIndecate').setValue(cellClickIndecate);
										dashboardDetailsWin.down('#record').setValue(record);
										dashboardDetailsWin.down('#filterdata').setValue(filterdata);
										dashboardDetailsWin.show();
									}
								}
							}
						}
					},
					plugins: [],
					columns: [{
							header: "#",
							sortable: false,
							xtype: 'rownumberer',
							width: 30,
							filter: {
								type: 'list'
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'date',
							sortable: true,
							text: 'Created On',
							filter: {
								type: 'string'
							},
							summaryType: 'count',
							summaryRenderer: function (value, summaryData, dataIndex) {
								return '<b>Total</b>';
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'fieldOfficerCount',
							sortable: true,
							text: 'Field',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<h7 style="background-color:#98FB98;cursor:pointer;">{0}</h7>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'ppcCount',
							sortable: true,
							text: 'PPC',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<h7 style="background-color:#98FB98;cursor:pointer;">{0}</h7>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'crmCount',
							sortable: true,
							text: 'CRM',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<h7 style="background-color:#98FB98;cursor:pointer;">{0}</h7>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'cadCount',
							sortable: true,
							text: 'CAD',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<h7 style="background-color:#98FB98;cursor:pointer;">{0}</h7>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'loanTrackerTotal',
							sortable: true,
							text: 'Total Loan',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<h7 style="background-color:#98FB98;cursor:pointer;">{0}</h7>', value);
								}
							}
						},
					]
				}],
			},
			{
				xtype: 'panel',
				title: 'Loan Count Date Wise',
				reference: 'loanCountDateWisePanel',
				itemId: 'loanCountDateWisePanel',
				id: 'loanCountDateWisePanel',
				tabConfig: {
					xtype: 'tab',
					id: 'loanCountDateWisePanelId',
					itemId: 'loanCountDateWisePanelId'
				},
				items: [{
					xtype: 'gridpanel',
					reference: 'loanCountDateWise',
					itemId: 'loanCountDateWise',
					columnWidth: 1.5,
					margin: '0 0 5 0',
					autoScroll: true,
					width: 1140,
					height: 540,
					layout: 'fit',
					header: false,
					border: true,
					title: false,
					filterable: true,
					closable: true,
					scrollable: true,
					border: false,
					store: 'gLoanCountDateWiseStore',
					viewConfig: {
						stripeRows: true,
						autoHeight: true,
						enableTextSelection: true,
						columnLines: true
					},

					features: [{
						id: 'group',
						ftype: 'summary',
						groupHeaderTpl: '{name}',
						hideGroupedHeader: true,
						enableGroupingMenu: false,
						showSummaryRow: true
					}],

					listeners: {
						scope: this,
						click: {
							element: 'body',
							delegate: '.x-grid-cell',
							fn: function (e, target, view) {

								var cmp = Ext.fly(target).up('#executiveDashboardMain').component;

								if (Ext.fly(target).up('tr').is('.x-grid-row-summary')) {

									var record = e.record;
									var deptName;
									var cellClickIndecate = "selectCell";
									var summaryClickIndecate = "summary";
									var undefined = false;
									var filterdata;
									var loanTrackingId = cmp.lookupReference('loanCountDateWiseloanTrackingId').value;
									var bpNoSrc = cmp.lookupReference('loanCountDateWisebpNoSrc').value;
									var nid4Search = cmp.lookupReference('loanCountDateWisenid4Search').value;
									var account4Search = cmp.lookupReference('loanCountDateWiseaccount4Search').value;

									deptName = cmp.lookupReference('loanCountDateWise').columns[target.cellIndex].text;

									if (deptName == '#' || deptName == 'Created On') return;
									if (loanTrackingId && !bpNoSrc && !nid4Search && !account4Search) filterdata = loanTrackingId;
									if (!loanTrackingId && bpNoSrc && !nid4Search && !account4Search) filterdata = bpNoSrc;
									if (!loanTrackingId && !bpNoSrc && nid4Search && !account4Search) filterdata = nid4Search;
									if (!loanTrackingId && !bpNoSrc && !nid4Search && account4Search) filterdata = account4Search;
														
									if (typeof record !== "undefined" && record != null && record != '') {
										var dashboardDetailsWin = getDashboardDetailsWindow('DASHBOARD DETAILS');
										dashboardDetailsWin.down('#deptName').setValue(deptName);
										dashboardDetailsWin.down('#record').setValue(record);
										dashboardDetailsWin.down('#cellClickIndecate').setValue(summaryClickIndecate);
										dashboardDetailsWin.down('#filterdata').setValue(filterdata);
										dashboardDetailsWin.show();
									} else return;
								} else {
									var filterdata;
									var loanTrackingId = cmp.lookupReference('loanCountDateWiseloanTrackingId').value;
									var bpNoSrc = cmp.lookupReference('loanCountDateWisebpNoSrc').value;
									var nid4Search = cmp.lookupReference('loanCountDateWisenid4Search').value;
									var account4Search = cmp.lookupReference('loanCountDateWiseaccount4Search').value;
									
									var recordLimit = target.firstElementChild.innerText;
									deptName = cmp.lookupReference('loanCountDateWise').columns[target.cellIndex].text;

									if (recordLimit == 0 || deptName == '#' || deptName == 'Created On') return;
									if (deptName == '#' || deptName == 'Created On') return;
									if (loanTrackingId && !bpNoSrc && !nid4Search && !account4Search) filterdata = loanTrackingId;
									if (!loanTrackingId && bpNoSrc && !nid4Search && !account4Search) filterdata = bpNoSrc;
									if (!loanTrackingId && !bpNoSrc && nid4Search && !account4Search) filterdata = nid4Search;
									if (!loanTrackingId && !bpNoSrc && !nid4Search && account4Search) filterdata = account4Search;
									
									else {
										var record = e.record;
										var deptName;
										var cellClickIndecate = "selectCell";

										var dashboardDetailsWin = getDashboardDetailsWindow('DASHBOARD DETAILS');
										dashboardDetailsWin.down('#deptName').setValue(deptName);
										dashboardDetailsWin.down('#record').setValue(record);
										dashboardDetailsWin.down('#cellClickIndecate').setValue(cellClickIndecate);
										dashboardDetailsWin.down('#record').setValue(record);
										dashboardDetailsWin.down('#filterdata').setValue(filterdata);
										dashboardDetailsWin.show();
									}
								}
							}
						}
					},
					plugins: [],
					dockedItems: [{
						xtype: 'panel',
						dock: 'top',
						itemId: 'loanCountDateWiseToolbar',
						layout: 'column',
						collapseDirection: 'top',
						collapsed: false,
						collapsible: true,
						title: 'Search',
						dockedItems: [{
							xtype: 'toolbar',
							dock: 'bottom',
							shadow: true,
							itemId: 'SearchTollbar',
							layout: {
								type: 'hbox',
								align: 'middle',
								pack: 'center'
							},
							items: [{
									xtype: 'button',
									padding: 2,
									text: 'Search',
									reference: 'SearchBtn',
									listeners: {
										click: 'onClickLoanCountDateWiseSrc'
									}
								},
								{
									xtype: 'button',
									padding: 3,
									text: 'Clear',
									listeners: {
										click: 'onClickLoanCountDateWiseClear'
									}
								},
								'-',
								'-',
								{
									iconCls: 'icon-refresh', // optional icon class
									tooltip: 'Refresh',
									align: 'right',
									margin: '0 10 0 0',
									handler: 'refreshLoanCountDateWise'
								},
							]
						}],
						items: [{
								xtype: 'textfield',
								itemId: 'loanCountDateWiseloanTrackingId',
								reference: 'loanCountDateWiseloanTrackingId',
								fieldLabel: 'Tracking Number',
								columnWidth: .33,
								labelAlign: 'right',
								labelWidth: 100,
								margin: '5 30 5 30',
							},
							{
								xtype: 'textfield',
								itemId: 'loanCountDateWisebpNoSrc',
								reference: 'loanCountDateWisebpNoSrc',
								fieldLabel: 'BP No',
								columnWidth: .33,
								labelAlign: 'right',
								labelWidth: 100,
								margin: '5 20 5 20',
							},
							{
								xtype: 'textfield',
								itemId: 'loanCountDateWisenid4Search',
								reference: 'loanCountDateWisenid4Search',
								fieldLabel: 'NID',
								columnWidth: .33,
								labelAlign: 'right',
								labelWidth: 100,
								margin: '5 30 5 30',
							},
							{
								xtype: 'textfield',
								itemId: 'loanCountDateWiseaccount4Search',
								reference: 'loanCountDateWiseaccount4Search',
								fieldLabel: 'Account No',
								columnWidth: .33,
								labelAlign: 'right',
								labelWidth: 100,
								margin: '5 30 5 30',
							},
							{
								xtype: 'datefield',
								itemId: 'loanCountDateWiseFormDateRef',
								reference: 'loanCountDateWiseFormDateRef',
								fieldLabel: 'From Date',
								columnWidth: .33,
								labelAlign: 'right',
								labelWidth: 100,
								margin: '5 20 5 20',
								format: 'd M Y',
								emptyText: 'From Date',
							},
							{
								xtype: 'datefield',
								itemId: 'loanCountDateWiseToDateRef',
								reference: 'loanCountDateWiseToDateRef',
								fieldLabel: 'To Date',
								columnWidth: .33,
								labelAlign: 'right',
								labelWidth: 100,
								margin: '5 30 5 30',
								format: 'd M Y',
								emptyText: 'To Date',
							}							
						]
					}],
                    columns: [{
							header: "#",
							sortable: false,
							xtype: 'rownumberer',
							width: 30,
							filter: {
								type: 'list'
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'date',
							sortable: true,
							text: 'Date',
							filter: {
								type: 'string'
							},
							summaryType: 'count',
							summaryRenderer: function (value, summaryData, dataIndex) {
								return '<b>Total</b>';
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'entryELoan',
							sortable: true,
							text: 'Entry eLoan',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<h7 style="background-color:#98FB98;cursor:pointer;">{0}</h7>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'entryWeb',
							sortable: true,
							text: 'Entry LMS',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<h7 style="background-color:#98FB98;cursor:pointer;">{0}</h7>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'ppcReceived',
							sortable: true,
							text: 'PPC Received',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<h7 style="background-color:#98FB98;cursor:pointer;">{0}</h7>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'ppcRejcetPending',
							sortable: true,
							text: 'PPC Rejcet/Query',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<h7 style="background-color:#98FB98;cursor:pointer;">{0}</h7>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'ppcRecommend',
							sortable: true,
							text: 'PPC Recommend',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<h7 style="background-color:#98FB98;cursor:pointer;">{0}</h7>', value);
								}
							}
						},

						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'crmReceived',
							sortable: true,
							text: 'CRM Received',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<h7 style="background-color:#98FB98;cursor:pointer;">{0}</h7>', value);
								}
							}
						}, {
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'crmRejcetPending',
							sortable: true,
							text: 'CRM Rejcet/Query',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<h7 style="background-color:#98FB98;cursor:pointer;">{0}</h7>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'crmApproved',
							sortable: true,
							text: 'CRM Approved',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<h7 style="background-color:#98FB98;cursor:pointer;">{0}</h7>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'mdApproved',
							sortable: true,
							text: 'MD Approved',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<h7 style="background-color:#98FB98;cursor:pointer;">{0}</h7>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'cadSanction',
							sortable: true,
							text: 'CAD Sanction',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<h7 style="background-color:#98FB98;cursor:pointer;">{0}</h7>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'cadDisbursed',
							sortable: true,
							text: 'CAD Disbursed',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<h7 style="background-color:#98FB98;cursor:pointer;">{0}</h7>', value);
								}
							}
						}
					]
				}],
			},
			{
				xtype: 'panel',
				title: 'Loan Status Dept Wise',
				reference: 'loanStatusDeptWisePanel',
				itemId: 'loanStatusDeptWisePanel',
				id: 'loanStatusDeptWisePanel',
				tabConfig: {
					xtype: 'tab',
					id: 'loanStatusDeptWisePanelId',
					itemId: 'loanStatusDeptWisePanelId'
				},
				items: [{
					xtype: 'gridpanel',
					reference: 'loanStatusDeptWise',
					itemId: 'loanStatusDeptWise',
					columnWidth: 1.5,
					margin: '0 0 5 0',
					autoScroll: true,
					width: 1150,
					height: 540,
					layout: 'fit',
					header: false,
					border: true,
					title: false,
					filterable: true,
					closable: true,
					scrollable: true,
					border: false,
					store: 'gLoanStatusDeptWiseStore',
					viewConfig: {
						stripeRows: true,
						autoHeight: true,
						enableTextSelection: true,
						columnLines: true
					},

					features: [{
						id: 'group',
						ftype: 'summary',
						groupHeaderTpl: '{name}',
						hideGroupedHeader: true,
						enableGroupingMenu: false,
						showSummaryRow: true
					}],
					listeners: {
						scope: this,
						click: {
							element: 'body',
							delegate: '.x-grid-cell',
							fn: function (e, target, view) {

								var cmp = Ext.fly(target).up('#executiveDashboardMain').component;

								if (Ext.fly(target).up('tr').is('.x-grid-row-summary')) {

									var record = e.record;
									var deptName;
									var cellClickIndecate = "selectCell";
									var summaryClickIndecate = "summary";
									var undefined = false;

									var filterdata;
									var loanTrackingId = cmp.lookupReference('loanStatusDeptWiseloanTrackingId').value;
									var bpNoSrc = cmp.lookupReference('loanStatusDeptWisebpNoSrc').value;
									var nid4Search = cmp.lookupReference('loanStatusDeptWisenid4Search').value;
									var account4Search = cmp.lookupReference('loanStatusDeptWiseaccount4Search').value;
									var dateType = cmp.lookupReference('loanStatusDeptWiseCheckOutDate').getChecked()[0].initialConfig.boxLabel;

									deptName = cmp.lookupReference('loanStatusDeptWise').columns[target.cellIndex].text;

									if (deptName == '#' || deptName == 'Created On') return;
									if (loanTrackingId && !bpNoSrc && !nid4Search && !account4Search) filterdata = loanTrackingId;
									if (!loanTrackingId && bpNoSrc && !nid4Search && !account4Search) filterdata = bpNoSrc;
									if (!loanTrackingId && !bpNoSrc && nid4Search && !account4Search) filterdata = nid4Search;
									if (!loanTrackingId && !bpNoSrc && !nid4Search && account4Search) filterdata = account4Search;

									if (deptName == '#' || deptName == 'Created On') return;
									
									if (typeof record !== "undefined" && record != null && record != '') {
										var dashboardDetailsWin = getDashboardDetailsWindow('DASHBOARD DETAILS');
										dashboardDetailsWin.down('#deptName').setValue(deptName);
										dashboardDetailsWin.down('#record').setValue(record);
										dashboardDetailsWin.down('#cellClickIndecate').setValue(summaryClickIndecate);
										dashboardDetailsWin.down('#filterdata').setValue(filterdata);
										dashboardDetailsWin.down('#dateType').setValue(dateType);
										dashboardDetailsWin.show();
									} else return;
								} else {
									var filterdata;
									var loanTrackingId = cmp.lookupReference('loanStatusDeptWiseloanTrackingId').value;
									var bpNoSrc = cmp.lookupReference('loanStatusDeptWisebpNoSrc').value;
									var nid4Search = cmp.lookupReference('loanStatusDeptWisenid4Search').value;
									var account4Search = cmp.lookupReference('loanStatusDeptWiseaccount4Search').value;
									var dateType = cmp.lookupReference('loanStatusDeptWiseCheckOutDate').getChecked()[0].initialConfig.boxLabel;

									var recordLimit = target.firstElementChild.innerText;
									deptName = cmp.lookupReference('loanStatusDeptWise').columns[target.cellIndex].text;

									if (recordLimit == 0 || deptName == '#' || deptName == 'Created On') return;
									if (recordLimit == 0 || deptName == '#' || deptName == 'Created On') return;
									if (deptName == '#' || deptName == 'Created On') return;
									if (loanTrackingId && !bpNoSrc && !nid4Search && !account4Search) filterdata = loanTrackingId;
									if (!loanTrackingId && bpNoSrc && !nid4Search && !account4Search) filterdata = bpNoSrc;
									if (!loanTrackingId && !bpNoSrc && nid4Search && !account4Search) filterdata = nid4Search;
									if (!loanTrackingId && !bpNoSrc && !nid4Search && account4Search) filterdata = account4Search;
									else {
										var record = e.record;
										var deptName;
										var cellClickIndecate = "selectCell";

										var dashboardDetailsWin = getDashboardDetailsWindow('DASHBOARD DETAILS');
										dashboardDetailsWin.down('#deptName').setValue(deptName);
										dashboardDetailsWin.down('#record').setValue(record);
										dashboardDetailsWin.down('#cellClickIndecate').setValue(cellClickIndecate);
										dashboardDetailsWin.down('#record').setValue(record);
										dashboardDetailsWin.down('#filterdata').setValue(filterdata);
										dashboardDetailsWin.down('#dateType').setValue(dateType);										
										dashboardDetailsWin.show();
									}
								}
							}
						}
					},
					plugins: [],
					dockedItems: [{
						xtype: 'panel',
						dock: 'top',
						itemId: 'loanStatusDeptWiseToolbar',
						layout: 'column',
						collapseDirection: 'top',
						collapsed: false,
						collapsible: true,
						title: 'Search',
						dockedItems: [{
							xtype: 'toolbar',
							dock: 'bottom',
							shadow: true,
							itemId: 'SearchTollbar',
							layout: {
								type: 'hbox',
								align: 'middle',
								pack: 'center'
							},
							items: [{
									xtype: 'button',
									padding: 2,
									text: 'Search',
									reference: 'SearchBtn',
									listeners: {
										click: 'onClickLoanStatusDeptWiseSrc'
									}
								},
								{
									xtype: 'button',
									padding: 3,
									text: 'Clear',
									listeners: {
										click: 'onClickLoanStatusDeptWiseClear'
									}
								},
								'-',
								'-',
								{
									iconCls: 'icon-refresh', // optional icon class
									tooltip: 'Refresh',
									align: 'right',
									margin: '0 10 0 0',
									handler: 'refreshLoanStatusDeptWise'
								},
							]
						}],
						items: [{
								xtype: 'textfield',
								itemId: 'loanStatusDeptWiseloanTrackingId',
								reference: 'loanStatusDeptWiseloanTrackingId',
								fieldLabel: 'Tracking Number',
								columnWidth: .25,
								labelAlign: 'right',
								labelWidth: 100,
								margin: '5 10 5 15',
							},
							{
								xtype: 'textfield',
								itemId: 'loanStatusDeptWisebpNoSrc',
								reference: 'loanStatusDeptWisebpNoSrc',
								fieldLabel: 'BP No',
								columnWidth: .25,
								labelAlign: 'right',
								labelWidth: 100,
								margin: '5 10 5 15',
							},
							{
								xtype: 'textfield',
								itemId: 'loanStatusDeptWisenid4Search',
								reference: 'loanStatusDeptWisenid4Search',
								fieldLabel: 'NID',
								columnWidth: .25,
								labelAlign: 'right',
								labelWidth: 100,
								margin: '5 10 5 15',
							},
							{
								xtype: 'textfield',
								itemId: 'loanStatusDeptWiseaccount4Search',
								reference: 'loanStatusDeptWiseaccount4Search',
								fieldLabel: 'Account No',
								columnWidth: .25,
								labelAlign: 'right',
								labelWidth: 100,
								margin: '5 10 5 15',
							},
							{
		                        xtype: 'radiogroup',
		                        itemId: 'loanStatusDeptWiseCheckOutDate',
		                        reference: 'loanStatusDeptWiseCheckOutDate',
		                        fieldLabel: 'Date',
		                        labelAlign: 'left',
		                        labelWidth: 80,
		                        columnWidth: .25,
		                        margin: '5 10 10 20',
		                        items: [
		                            { 
		                                boxLabel: 'Origination',
		                                reference : 'originationDate', 
		                                itemId : 'originationDate', 
		                                inputValue: 'originationDate',
				                        listeners: {
				                            change: 'onCheckOrigModDate'
				                        }
				                    },
		                            { 
		                                boxLabel: 'Modification',
		                                reference : 'modificationDate', 
		                                itemId : 'modificationDate', 
		                                inputValue: 'modification',  
		                                checked: true,
				                        listeners: {
				                            change: 'onCheckOrigModDate'
				                        }
		                            }            
		                        ]
		                    }, 
							{
								xtype: 'datefield',
								itemId: 'loanStatusDeptWiseFormDateRef',
								reference: 'loanStatusDeptWiseFormDateRef',
								fieldLabel: 'From Date',
								columnWidth: .25,
								labelAlign: 'right',
								labelWidth: 100,
								margin: '5 10 5 15',
								format: 'd M Y',
								emptyText: 'From Date',
							},
							{
								xtype: 'datefield',
								itemId: 'loanStatusDeptWiseToDateRef',
								reference: 'loanStatusDeptWiseToDateRef',
								fieldLabel: 'To Date',
								columnWidth: .25,
								labelAlign: 'right',
								labelWidth: 100,
								margin: '5 10 5 15',
								format: 'd M Y',
								emptyText: 'To Date',
							}							
						]
					}],
					columns: [{
							header: "#",
							sortable: false,
							xtype: 'rownumberer',
							width: 30,
							filter: {
								type: 'list'
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'date',
							sortable: true,
							text: 'Date',
							filter: {
								type: 'string'
							},
							summaryType: 'count',
							summaryRenderer: function (value, summaryData, dataIndex) {
								return '<b>Total</b>';
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'entryELoan',
							sortable: true,
							text: 'Entry eLoan',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<h7 style="background-color:#98FB98;cursor:pointer;">{0}</h7>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'entryWeb',
							sortable: true,
							text: 'Entry LMS',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<h7 style="background-color:#98FB98;cursor:pointer;">{0}</h7>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'ppcReceived',
							sortable: true,
							text: 'PPC Received',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<h7 style="background-color:#98FB98;cursor:pointer;">{0}</h7>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'ppcRejcetPending',
							sortable: true,
							text: 'PPC Rejcet/Query',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<h7 style="background-color:#98FB98;cursor:pointer;">{0}</h7>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'ppcRecommend',
							sortable: true,
							text: 'PPC Recommend',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<h7 style="background-color:#98FB98;cursor:pointer;">{0}</h7>', value);
								}
							}
						},

						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'crmReceived',
							sortable: true,
							text: 'CRM Received',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<h7 style="background-color:#98FB98;cursor:pointer;">{0}</h7>', value);
								}
							}
						}, {
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'crmRejcetPending',
							sortable: true,
							text: 'CRM Rejcet/Query',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<h7 style="background-color:#98FB98;cursor:pointer;">{0}</h7>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'crmApproved',
							sortable: true,
							text: 'CRM Approved',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<h7 style="background-color:#98FB98;cursor:pointer;">{0}</h7>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'mdApproved',
							sortable: true,
							text: 'MD Approved',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<h7 style="background-color:#98FB98;cursor:pointer;">{0}</h7>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'cadSanction',
							sortable: true,
							text: 'CAD Sanction',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<h7 style="background-color:#98FB98;cursor:pointer;">{0}</h7>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'cadDisbursed',
							sortable: true,
							text: 'CAD Disbursed',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<h7 style="background-color:#98FB98;cursor:pointer;">{0}</h7>', value);
								}
							}
						}
					],
				}]
			},
			// Loan count Date wise and loan status dept wise this two dashboard are basically the same
			// Depart wise Loan count, 
			// just remove the Depart wise Loan count as it is counting the same file twice
			// {
			// 	xtype: 'panel',
			// 	title: 'Depart Wise Loan Count',
			// 	reference: 'departmentWiseLoanCountPanel',
			// 	itemId: 'departmentWiseLoanCountPanel',
			// 	id: 'departmentWiseLoanCountPanel',
			// 	tabConfig: {
			// 		xtype: 'tab',
			// 		id: 'departmentWiseLoanCountPanelId',
			// 		itemId: 'departmentWiseLoanCountPanelId'
			// 	},
			// 	items: [{
			// 		xtype: 'gridpanel',
			// 		reference: 'departmentWiseLoanCountGrid',
			// 		itemId: 'departmentWiseLoanCountGrid',
			// 		columnWidth: 1.5,
			// 		margin: '0 0 5 0',
			// 		autoScroll: true,
			// 		width: 1150,
			// 		height: 540,
			// 		layout: 'fit',
			// 		header: false,
			// 		border: true,
			// 		title: false,
			// 		filterable: true,
			// 		closable: true,
			// 		scrollable: true,
			// 		border: false,
			// 		store: 'gDepartmentWiseLoanCount',
			// 		viewConfig: {
			// 			stripeRows: true,
			// 			autoHeight: true,
			// 			enableTextSelection: true,
			// 			columnLines: true
			// 		},

			// 		listeners: {
			// 			cellclick: 'onDeptCountGridCellClick'
			// 		},

			// 		features: [{
			// 			id: 'group',
			// 			ftype: 'summary',
			// 			groupHeaderTpl: '{name}',
			// 			hideGroupedHeader: true,
			// 			enableGroupingMenu: false,
			// 			showSummaryRow: true
			// 		}],

			// 		plugins: [],

			// 		dockedItems: [{
			// 			xtype: 'toolbar',
			// 			dock: 'top',
			// 			itemId: 'departmentWiseLoanCountToolbar',
			// 			height: 30,
			// 			items: [{
			// 				xtype: 'tbfill'
			// 				},
			// 				{
			// 					xtype: 'combobox',
			// 					itemId: 'customerName',
			// 					reference: 'customerName',
			// 					fieldLabel: 'Customer Name',
			// 					labelAlign: 'right',
			// 					width: 300,
			// 					labelWidth: 100,
			// 					margin: '2 2 2 2',
			// 					mode: 'local',
			// 					displayField: 'customerName',
			// 					valueField: 'customerName',
			// 					queryMode: 'local',
			// 					store: 'gCustomerStore'
			// 				},
			// 				{
			// 					xtype: 'datefield',
			// 					fieldLabel: 'From',
			// 					labelAlign: 'right',
			// 					emptyText: 'From Date',
			// 					format: 'd M Y',
			// 					reference: 'departmentFormDateRef',
			// 					margin: '2 2 2 2',
			// 					border: 1,
			// 					labelWidth: 40,
			// 					width: 150
			// 				},
			// 				{
			// 					xtype: 'datefield',
			// 					fieldLabel: 'To',
			// 					labelAlign: 'right',
			// 					emptyText: 'To Date',
			// 					format: 'd M Y',
			// 					border: 1,
			// 					reference: 'departmentToDateRef',
			// 					margin: '2 2 2 2',
			// 					labelWidth: 40,
			// 					width: 150
			// 				},
			// 				{
			// 					xtype: 'button',
			// 					margin: '2 2 2 2',
			// 					text: 'Search',
			// 					listeners: {
			// 						click: 'onClickDeptCountSrc'
			// 					}
			// 				},
			// 				{
			// 					xtype: 'button',
			// 					margin: '2 2 2 2',
			// 					text: 'Clear',
			// 					listeners: {
			// 						click: 'onClickDeptCountClear'
			// 					}
			// 				},
			// 				'-',
			// 				'-',
			// 				{
			// 					iconCls: 'icon-refresh', // optional icon class
			// 					tooltip: 'Refresh',
			// 					align: 'right',
			// 					margin: '0 10 0 0',
			// 					handler: 'refreshLoanDepartmentWise'
			// 				}
			// 			]
			// 		}],

			// 		columns: []
			// 	}],
			// },
			{
				xtype: 'panel',
				title: 'On Process In PPC',
				reference: 'ppcUserWiseOnProcessPanel',
				itemId: 'ppcUserWiseOnProcessPanel',
				id: 'ppcUserWiseOnProcessPanel',
				tabConfig: {
					xtype: 'tab',
					id: 'ppcUserWiseOnProcessPanelId',
					itemId: 'ppcUserWiseOnProcessPanelId'
				},
				items: [{
					xtype: 'gridpanel',
					reference: 'ppcUserWiseOnProcessGrid',
					columnWidth: 1,
					margin: '0 0 5 0',
					autoScroll: true,
					width: 1150,
					height: 540,
					layout: 'fit',
					header: false,
					border: true,
					title: false,
					filterable: true,
					closable: true,
					border: false,
					store: 'gPpcUserWiseOnProcess',
					viewConfig: {
						stripeRows: true,
						autoHeight: true,
						enableTextSelection: true,
						columnLines: true
					},

					features: [{
						id: 'group',
						ftype: 'summary',
						groupHeaderTpl: '{name}',
						hideGroupedHeader: true,
						enableGroupingMenu: false,
						showSummaryRow: true
					}],
					listeners: {
						scope: this,
						click: {
								element: 'body',
								delegate: '.x-grid-cell',
								fn: function (e, target, view) {

									var cmp = Ext.fly(target).up('#executiveDashboardMain').component;

									if (Ext.fly(target).up('tr').is('.x-grid-row-summary')) {

										var record = e.record;
										var deptName;
										var cellClickIndecate = "selectCell";
										var summaryClickIndecate = "summary";
										var undefined = false;
										var total = 'total';
										var filterdata;
										var loanTrackingId = cmp.lookupReference('onPpcProcessloanTrackingId').value;
										var bpNoSrc = cmp.lookupReference('onPpcProcessbpNoSrc').value;
										var nid4Search = cmp.lookupReference('onPpcProcessnid4Search').value;
										var account4Search = cmp.lookupReference('onPpcProcessaccount4Search').value;

										deptName = cmp.lookupReference('ppcUserWiseOnProcessGrid').getColumns()[target.cellIndex].text;

										if (deptName == '#' || deptName == 'Date') return;
										if (loanTrackingId && !bpNoSrc && !nid4Search && !account4Search) filterdata = loanTrackingId;
										if (!loanTrackingId && bpNoSrc && !nid4Search && !account4Search) filterdata = bpNoSrc;
										if (!loanTrackingId && !bpNoSrc && nid4Search && !account4Search) filterdata = nid4Search;
										if (!loanTrackingId && !bpNoSrc && !nid4Search && account4Search) filterdata = account4Search;

										if (typeof record !== "undefined" && record != null && record != '') {
											var dashboardDetailsWin = getDashboardDetailsWindow('DASHBOARD DETAILS');
											dashboardDetailsWin.down('#deptName').setValue(deptName);
											dashboardDetailsWin.down('#total').setValue(total);
											dashboardDetailsWin.down('#record').setValue(record);
											dashboardDetailsWin.down('#cellClickIndecate').setValue(summaryClickIndecate);
											dashboardDetailsWin.down('#filterdata').setValue(filterdata);
											dashboardDetailsWin.show();
										} else return;
									} else {
										var recordLimit = target.firstElementChild.innerText;
										var filterdata;
										var loanTrackingId = cmp.lookupReference('onPpcProcessloanTrackingId').value;
										var bpNoSrc = cmp.lookupReference('onPpcProcessbpNoSrc').value;
										var nid4Search = cmp.lookupReference('onPpcProcessnid4Search').value;
										var account4Search = cmp.lookupReference('onPpcProcessaccount4Search').value;

										deptName = cmp.lookupReference('ppcUserWiseOnProcessGrid').getColumns()[target.cellIndex].text;

										if (loanTrackingId && !bpNoSrc && !nid4Search && !account4Search) filterdata = loanTrackingId;
										if (!loanTrackingId && bpNoSrc && !nid4Search && !account4Search) filterdata = bpNoSrc;
										if (!loanTrackingId && !bpNoSrc && nid4Search && !account4Search) filterdata = nid4Search;
										if (!loanTrackingId && !bpNoSrc && !nid4Search && account4Search) filterdata = account4Search;

										if (recordLimit == 0 || deptName == '#' || deptName == 'Date') return;
										else {
											var record = e.record;
											var deptName;
											var cellClickIndecate = "selectCell";

											var dashboardDetailsWin = getDashboardDetailsWindow('DASHBOARD DETAILS');
											dashboardDetailsWin.down('#deptName').setValue(deptName);
											dashboardDetailsWin.down('#record').setValue(record);
											dashboardDetailsWin.down('#cellClickIndecate').setValue(cellClickIndecate);
											dashboardDetailsWin.down('#record').setValue(record);
											dashboardDetailsWin.down('#filterdata').setValue(filterdata);
											dashboardDetailsWin.show();
										}
									}
								}
							}
						},

					plugins: [],

					dockedItems: [{
						xtype: 'panel',
						dock: 'top',
						itemId: 'onPpcProcessToolbar',
						layout: 'column',
						collapseDirection: 'top',
						collapsed: false,
						collapsible: true,
						title: 'Search',
						dockedItems: [{
							xtype: 'toolbar',
							dock: 'bottom',
							shadow: true,
							itemId: 'SearchTollbar',
							layout: {
								type: 'hbox',
								align: 'middle',
								pack: 'center'
							},
							items: [{
									xtype: 'button',
									padding: 2,
									text: 'Search',
									reference: 'SearchBtn',
									listeners: {
										click: 'onClickPpcOnProcessSearch'
									}
								},
								{
									xtype: 'button',
									padding: 3,
									text: 'Clear',
									listeners: {
										click: 'onClickPpcOnProcessCountClear'
									}
								},
								'-',
								'-',
								{
									iconCls: 'icon-refresh', // optional icon class
									tooltip: 'Refresh',
									align: 'right',
									margin: '0 10 0 0',
									handler: 'refreshLoanPpcProcessWise'
								},
							]
						}],
						items: [{
			                    xtype: 'combobox',
			                    itemId: 'employeeInInformation',
			                    reference: 'employeeInInformation',
			                    fieldLabel: 'Choose Option',
			                    labelAlign: 'right',
			                    labelWidth: 100,
			                    columnWidth: .25,
			                    border: 1,
			                    margin: '5 10 5 15',
			                    mode: 'local',
			                    displayField: 'name',
			                    valueField: 'value',
			                    queryMode: 'local',
			                    forceSelection: true,
			                    editable: false,
			                   // width: 150,
			                    store: Ext.create('Ext.data.Store', {
			                        fields: ['name', 'value'],
			                        data: [
			                            {
			                                name: 'Employee User Name',
			                                value: 'Employee User Name'
			                            }, {
			                                name: 'Employee Id',
			                                value:'Employee Id'
			                            }
			                        ]
			                    }),
			                    listeners: {		                        
		                        change: 'onEmployeeInInfor'
		                       }
			                },
			                {
			                    xtype: 'textfield',
			                    itemId: 'employeeValue',
			                    reference: 'employeeValue',
			                    columnWidth: .25,
			                    labelAlign: 'left',
			                    labelWidth: 100,
			                    margin: '5 10 5 15',
			                    fieldStyle: 'background: #7ABDFF',
			                    readOnly: true
			                } ,
						    {
								xtype: 'textfield',
								itemId: 'onPpcProcessloanTrackingId',
								reference: 'onPpcProcessloanTrackingId',
								fieldLabel: 'Tracking Number',
								columnWidth: .25,
								labelAlign: 'right',
								labelWidth: 100,
								margin: '5 10 5 15',
							},
							{
								xtype: 'textfield',
								itemId: 'onPpcProcessbpNoSrc',
								reference: 'onPpcProcessbpNoSrc',
								fieldLabel: 'BP No',
								columnWidth: .25,
								labelAlign: 'right',
								labelWidth: 100,
								margin: '5 10 5 15',
							},
							{
								xtype: 'textfield',
								itemId: 'onPpcProcessnid4Search',
								reference: 'onPpcProcessnid4Search',
								fieldLabel: 'NID',
								columnWidth: .25,
								labelAlign: 'right',
								labelWidth: 100,
								margin: '5 10 5 15',
							},
							{
								xtype: 'textfield',
								itemId: 'onPpcProcessaccount4Search',
								reference: 'onPpcProcessaccount4Search',
								fieldLabel: 'Account No',
								columnWidth: .25,
								labelAlign: 'left',
								labelWidth: 100,
								margin: '5 10 5 15'
							},
							{
								xtype: 'datefield',
								itemId: 'onPpcProcessFormDateRef',
								reference: 'onPpcProcessFormDateRef',
								fieldLabel: 'From Date',
								columnWidth: .25,
								labelAlign: 'right',
								labelWidth: 100,
								margin: '5 10 5 15',
								format: 'd M Y',
								emptyText: 'From Date',
							},
							{
								xtype: 'datefield',
								itemId: 'onPpcProcessToDateRef',
								reference: 'onPpcProcessToDateRef',
								fieldLabel: 'To Date',
								columnWidth: .25,
								labelAlign: 'right',
								labelWidth: 100,
								margin: '5 10 5 15',
								format: 'd M Y',
								emptyText: 'To Date',
							}							
						]
					}],

					columns: []
				}]
			},
			{
				xtype: 'panel',
				title: 'On Process In CRM',
				reference: 'userWiseOnProcessPanel',
				itemId: 'userWiseOnProcessPanel',
				id: 'userWiseOnProcessPanel',
				tabConfig: {
					xtype: 'tab',
					id: 'userWiseOnProcessPanelId',
					itemId: 'userWiseOnProcessPanelId'
				},
				items: [{
					xtype: 'gridpanel',
					reference: 'userWiseOnProcessGrid',
					columnWidth: 1,
					margin: '0 0 5 0',
					autoScroll: true,
					width: 1150,
					height: 540,
					layout: 'fit',
					header: false,
					border: true,
					title: false,
					filterable: true,
					closable: true,
					border: false,
					store: 'gUserWiseOnProcess',
					viewConfig: {
						stripeRows: true,
						autoHeight: true,
						enableTextSelection: true,
						columnLines: true
					},

					features: [{
						id: 'group',
						ftype: 'summary',
						groupHeaderTpl: '{name}',
						hideGroupedHeader: true,
						enableGroupingMenu: false,
						showSummaryRow: true
					}],

					plugins: [],

					dockedItems: [{
						xtype: 'panel',
						dock: 'top',
						itemId: 'onProcessToolbar',
						layout: 'column',
						collapseDirection: 'top',
						collapsed: false,
						collapsible: true,
						title: 'Search',
						dockedItems: [{
							xtype: 'toolbar',
							dock: 'bottom',
							shadow: true,
							itemId: 'SearchTollbar',
							layout: {
								type: 'hbox',
								align: 'middle',
								pack: 'center'
							},
							items: [{
									xtype: 'button',
									padding: 2,
									text: 'Search',
									reference: 'SearchBtn',
									listeners: {
										click: 'onClickOnProcessCountSrc'
									}
								},
								{
									xtype: 'button',
									padding: 3,
									text: 'Clear',
									listeners: {
										click: 'onClickOnProcessCountClear'
									}
								},
								'-',
								'-',
								{
									iconCls: 'icon-refresh', // optional icon class
									tooltip: 'Refresh',
									align: 'right',
									margin: '0 10 0 0',
									handler: 'refreshLoanProcessWise'
								},
							]
						}],
						items: [{
								xtype: 'textfield',
								itemId: 'onProcessloanTrackingId',
								reference: 'onProcessloanTrackingId',
								fieldLabel: 'Tracking Number',
								columnWidth: .33,
								labelAlign: 'right',
								labelWidth: 100,
								margin: '5 30 5 30',
							},
							{
								xtype: 'textfield',
								itemId: 'onProcessbpNoSrc',
								reference: 'onProcessbpNoSrc',
								fieldLabel: 'BP No',
								columnWidth: .33,
								labelAlign: 'right',
								labelWidth: 100,
								margin: '5 20 5 20',
							},
							{
								xtype: 'textfield',
								itemId: 'onProcessnid4Search',
								reference: 'onProcessnid4Search',
								fieldLabel: 'NID',
								columnWidth: .33,
								labelAlign: 'right',
								labelWidth: 100,
								margin: '5 30 5 30',
							},
							{
								xtype: 'textfield',
								itemId: 'onProcessaccount4Search',
								reference: 'onProcessaccount4Search',
								fieldLabel: 'Account No',
								columnWidth: .33,
								labelAlign: 'right',
								labelWidth: 100,
								margin: '5 30 5 30',
							},
							{
								xtype: 'datefield',
								itemId: 'onProcessFormDateRef',
								reference: 'onProcessFormDateRef',
								fieldLabel: 'From Date',
								columnWidth: .33,
								labelAlign: 'right',
								labelWidth: 100,
								margin: '5 20 5 20',
								format: 'd M Y',
								emptyText: 'From Date',
							},
							{
								xtype: 'datefield',
								itemId: 'onProcessToDateRef',
								reference: 'onProcessToDateRef',
								fieldLabel: 'To Date',
								columnWidth: .33,
								labelAlign: 'right',
								labelWidth: 100,
								margin: '5 30 5 30',
								format: 'd M Y',
								emptyText: 'To Date',
							}							
						]
					}],

					columns: []
				}]
			},
			{
				xtype: 'panel',
				title: 'File Received In CRM',
				reference: 'userWiseFileReceivedPanel',
				itemId: 'userWiseFileReceivedPanel',
				id: 'userWiseFileReceivedPanel',
				tabConfig: {
					xtype: 'tab',
					id: 'userWiseFileReceivedPanelId',
					itemId: 'userWiseFileReceivedPanelId'
				},
				items: [{
					xtype: 'gridpanel',
					reference: 'userWiseFileReceivedGrid',
					columnWidth: 1,
					margin: '0 0 5 0',
					header: false,
					border: true,
					title: false,
					autoScroll: true,
					width: 1150,
					height: 538,
					layout: 'fit',
					filterable: true,
					closable: true,
					border: false,
					store: 'gUserWiseFileReceived',
					viewConfig: {
						stripeRows: true,
						autoHeight: true,
						enableTextSelection: true,
						columnLines: true
					},

					features: [{
						id: 'group',
						ftype: 'summary',
						groupHeaderTpl: '{name}',
						hideGroupedHeader: true,
						enableGroupingMenu: false,
						showSummaryRow: true
					}],

					plugins: [],

					dockedItems: [{
						xtype: 'panel',
						dock: 'top',
						itemId: 'userWiseFileReceivedToolbar',
						layout: 'column',
						collapseDirection: 'top',
						collapsed: false,
						collapsible: true,
						title: 'Search',
						dockedItems: [{
							xtype: 'toolbar',
							dock: 'bottom',
							shadow: true,
							itemId: 'SearchTollbar',
							layout: {
								type: 'hbox',
								align: 'middle',
								pack: 'center'
							},
							items: [{
									xtype: 'button',
									padding: 2,
									text: 'Search',
									reference: 'SearchBtn',
									listeners: {
										click: 'onClickFileReceivedCountSrc'
									}
								},
								{
									xtype: 'button',
									padding: 3,
									text: 'Clear',
									listeners: {
										click: 'onClickFileReceivedCountClear'
									}
								},
								'-',
								'-',
								{
									iconCls: 'icon-refresh', // optional icon class
									tooltip: 'Refresh',
									align: 'right',
									margin: '0 10 0 0',
									handler: 'refreshLoanFileReceive'
								},
							]
						}],
						items: [{
								xtype: 'textfield',
								itemId: 'fileReceivedloanTrackingId',
								reference: 'fileReceivedloanTrackingId',
								fieldLabel: 'Tracking Number',
								columnWidth: .33,
								labelAlign: 'right',
								labelWidth: 100,
								margin: '5 30 5 30',
							},
							{
								xtype: 'textfield',
								itemId: 'fileReceivedbpNoSrc',
								reference: 'fileReceivedbpNoSrc',
								fieldLabel: 'BP No',
								columnWidth: .33,
								labelAlign: 'right',
								labelWidth: 100,
								margin: '5 20 5 20',
							},
							{
								xtype: 'textfield',
								itemId: 'fileReceivednid4Search',
								reference: 'fileReceivednid4Search',
								fieldLabel: 'NID',
								columnWidth: .33,
								labelAlign: 'right',
								labelWidth: 100,
								margin: '5 30 5 30',
							},
							{
								xtype: 'textfield',
								itemId: 'fileReceivedaccount4Search',
								reference: 'fileReceivedaccount4Search',
								fieldLabel: 'Account No',
								columnWidth: .33,
								labelAlign: 'right',
								labelWidth: 100,
								margin: '5 30 5 30',
							},
							{
								xtype: 'datefield',
								itemId: 'fileReceivedFormDateRef',
								reference: 'fileReceivedFormDateRef',
								fieldLabel: 'From Date',
								columnWidth: .33,
								labelAlign: 'right',
								labelWidth: 100,
								margin: '5 20 5 20',
								format: 'd M Y',
								emptyText: 'From Date',
							},
							{
								xtype: 'datefield',
								itemId: 'fileReceivedToDateRef',
								reference: 'fileReceivedToDateRef',
								fieldLabel: 'To Date',
								columnWidth: .33,
								labelAlign: 'right',
								labelWidth: 100,
								margin: '5 30 5 30',
								format: 'd M Y',
								emptyText: 'To Date',
							}							
						]
					}],

					columns: []
				}]
			},
			{
				xtype: 'panel',
				title: 'Status Wise Loan Count',
				reference: 'statusWiseLoanCount',
				itemId: 'statusWiseLoanCount',
				id: 'statusWiseLoanCount',
				tabConfig: {
					xtype: 'tab',
					id: 'statusWiseLoanCountId',
					itemId: 'statusWiseLoanCountId'
				},
				items: [{
					xtype: 'gridpanel',
					reference: 'statusWiseLoanCountGrid',
					columnWidth: 1.5,
					margin: '0 0 5 0',
					autoScroll: true,
					width: 1150,
					height: 545,
					layout: 'fit',
					header: false,
					border: true,
					title: false,
					layout: 'fit',
					filterable: true,
					closable: true,
					scrollable: true,
					border: false,
					store: 'gStatusWiseLoanCount',
					viewConfig: {
						stripeRows: true,
						autoHeight: true,
						enableTextSelection: true,
						columnLines: true
					},

					features: [{
						id: 'group',
						ftype: 'summary',
						groupHeaderTpl: '{name}',
						hideGroupedHeader: true,
						enableGroupingMenu: false,
						showSummaryRow: true
					}],

					plugins: [],

					dockedItems: [{
						xtype: 'panel',
						dock: 'top',
						itemId: 'statusWiseLoanCountToolbar',
						layout: 'column',
						collapseDirection: 'top',
						collapsed: false,
						collapsible: true,
						title: 'Search',
						dockedItems: [{
							xtype: 'toolbar',
							dock: 'bottom',
							shadow: true,
							itemId: 'SearchTollbar',
							layout: {
								type: 'hbox',
								align: 'middle',
								pack: 'center'
							},
							items: [{
									xtype: 'button',
									padding: 2,
									text: 'Search',
									reference: 'SearchBtn',
									listeners: {
										click: 'onClickStatusCountSrc'
									}
								},
								{
									xtype: 'button',
									padding: 3,
									text: 'Clear',
									listeners: {
										click: 'onClickStatusCountClear'
									}
								},
								'-',
								'-',
								{
									iconCls: 'icon-refresh', // optional icon class
									tooltip: 'Refresh',
									align: 'right',
									margin: '0 10 0 0',
									handler: 'refreshLoanStatusWise'
								},
							]
						}],
						items: [{
								xtype: 'textfield',
								itemId: 'statusWiseLoanCountloanTrackingId',
								reference: 'statusWiseLoanCountloanTrackingId',
								fieldLabel: 'Tracking Number',
								columnWidth: .33,
								labelAlign: 'right',
								labelWidth: 100,
								margin: '5 30 5 30',
							},
							{
								xtype: 'textfield',
								itemId: 'statusWiseLoanCountbpNoSrc',
								reference: 'statusWiseLoanCountbpNoSrc',
								fieldLabel: 'BP No',
								columnWidth: .33,
								labelAlign: 'right',
								labelWidth: 100,
								margin: '5 20 5 20',
							},
							{
								xtype: 'textfield',
								itemId: 'statusWiseLoanCountnid4Search',
								reference: 'statusWiseLoanCountnid4Search',
								fieldLabel: 'NID',
								columnWidth: .33,
								labelAlign: 'right',
								labelWidth: 100,
								margin: '5 30 5 30',
							},
							{
								xtype: 'textfield',
								itemId: 'statusWiseLoanCountaccount4Search',
								reference: 'statusWiseLoanCountaccount4Search',
								fieldLabel: 'Account No',
								columnWidth: .33,
								labelAlign: 'right',
								labelWidth: 100,
								margin: '5 30 5 30',
							},
							{
								xtype: 'datefield',
								itemId: 'statusFormDateRef',
								reference: 'statusFormDateRef',
								fieldLabel: 'From Date',
								columnWidth: .33,
								labelAlign: 'right',
								labelWidth: 100,
								margin: '5 20 5 20',
								format: 'd M Y',
								emptyText: 'From Date',
							},
							{
								xtype: 'datefield',
								itemId: 'statusToDateRef',
								reference: 'statusToDateRef',
								fieldLabel: 'To Date',
								columnWidth: .33,
								labelAlign: 'right',
								labelWidth: 100,
								margin: '5 30 5 30',
								format: 'd M Y',
								emptyText: 'To Date',
							}							
						]
					}],

					columns: [{
							header: "#",
							sortable: false,
							xtype: 'rownumberer',
							width: 30,
							filter: {
								type: 'list'
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'date',
							sortable: true,
							text: 'Date',
							filter: {
								type: 'string'
							},
							summaryType: 'count',
							summaryRenderer: function (value, summaryData, dataIndex) {
								return '<b>Total</b>';
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'newEntry',
							sortable: true,
							text: 'New Entry',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<b>{0}</b>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'pendingRecomPpc',
							sortable: true,
							text: 'Pending Recom(PPC)',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<b>{0}</b>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'recomByPpc',
							sortable: true,
							text: 'Recom. By PPC',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<b>{0}</b>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'receivebyCrm',
							sortable: true,
							text: 'Receive by CRM',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<b>{0}</b>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'complete',
							sortable: true,
							text: 'Complete',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<b>{0}</b>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'conApproved',
							sortable: true,
							text: 'Con. Approved',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<b>{0}</b>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'mdApproved',
							sortable: true,
							text: 'MD Approved',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<b>{0}</b>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'onProcess',
							sortable: true,
							text: 'On Process',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<b>{0}</b>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 100,
							dataIndex: 'pending',
							sortable: true,
							text: 'Pending',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<b>{0}</b>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 150,
							dataIndex: 'slGenerated',
							sortable: true,
							text: 'Sanction Letter Generated',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<b>{0}</b>', value);
								}
							}
						},
						{
							xtype: 'gridcolumn',
							align: 'center',
							width: 150,
							dataIndex: 'rejectOrDeclien',
							sortable: true,
							text: 'Reject/Decline',
							summaryType: 'sum',
							renderer: 'onGridDataRenderer',
							summaryRenderer: function (value, summaryData, dataIndex) {
								if (isNaN(value)) {
									return 0;
								} else {
									return Ext.String.format('<b>{0}</b>', value);
								}
							}
						}
					]
				}],
			}
		]
	}],
	listeners: {
		afterrender: 'loadExecutiveDashboardAllData',
		//beforerender : 'onBeforeLoadLoanPanel'
	}
});